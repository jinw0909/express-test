<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dominance Charts</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .chart-container {
            width: 50%;
            margin: auto;
        }
        #doughnutChart {
            padding: 20px; /* Add padding around the canvas */
        }
    </style>
</head>
<body>
<div class="chart-container">
    <canvas id="lineChart"></canvas>
</div>
<div class="chart-container">
    <canvas id="doughnutChart"></canvas>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get the data from the server
        const goyaArr = <%- JSON.stringify(goyDominance) %>;
        const finalDominance = <%- JSON.stringify(dominance) %>;

        // Create the line chart for goyaArr
        const ctxLine = document.getElementById('lineChart').getContext('2d');
        const lineChart = new Chart(ctxLine, {
            type: 'line',
            data: {
                labels: goyaArr.map((_, index) => `Hour ${index + 1}`),
                datasets: [{
                    label: 'Goya Dominance',
                    data: goyaArr,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    fill: false,
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Hours'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Dominance'
                        }
                    }
                }
            }
        });

        // Sort the finalDominance data
        const sortedData = Object.entries(finalDominance).sort((a, b) => b[1] - a[1]);
        const sortedLabels = sortedData.map(item => item[0].toUpperCase()); // Capitalize labels
        const sortedValues = sortedData.map(item => item[1]);

        // Create the doughnut chart for finalDominance
        const ctxDoughnut = document.getElementById('doughnutChart').getContext('2d');
        const doughnutChart = new Chart(ctxDoughnut, {
            type: 'doughnut',
            data: {
                labels: sortedLabels,
                datasets: [{
                    data: sortedValues,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)',
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.raw !== undefined ? context.raw.toFixed(2) + '%' : '';
                                return `${label}: ${value}`;
                            }
                        }
                    },
                    legend: {
                        display: true,
                        position: 'right',
                        labels: {
                            generateLabels: function(chart) {
                                const data = chart.data;
                                if (data.labels.length && data.datasets.length) {
                                    return data.labels.map((label, i) => {
                                        const meta = chart.getDatasetMeta(0);
                                        const value = data.datasets[0].data[i].toFixed(2) + '%';
                                        return {
                                            text: `${label}: ${value}`,
                                            fillStyle: data.datasets[0].backgroundColor[i],
                                            hidden: meta.data[i].hidden,
                                            index: i
                                        };
                                    });
                                }
                                return [];
                            }
                        }
                    }
                }
            }
        });
    });
</script>
</body>
</html>
