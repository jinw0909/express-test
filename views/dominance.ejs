<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dominance Charts</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .main-container {
            max-width: 768px;
            margin: auto;
        }
    </style>
</head>
<body>
<div class="main-container">
    <div><%= analysis.time%></div>
    <div class="select-lang">
        <a href="/dominance?lang=en" id="selectEn">English</a>
        <a href="/dominance?lang=jp" id="selectJp">日本語</a>
        <a href="/dominance?lang=kr" id="selectKr">한국어</a>
        <a href="/dominance?lang=vn" id="selectVn">tiếng Việt</a>
        <a href="/dominance?lang=cn" id="selectCn">汉文</a>
    </div>
    <div>
        <button id="playAudio">Play</button>
        <button id="pauseAudio">Pause</button>
        <audio id="analysisAudio" src="<%= analysis.mp3%>"></audio>
    </div>
    <div class="analysis">
        <%= analysis.analysis%>
    </div>
    <div class="charts">
        <div class="chart-container">
            <canvas id="lineChart"></canvas>
        </div>
        <div class="chart-container">
            <canvas id="doughnutChart" width="1500" height="1500" style="display: block; box-sizing: border-box;"></canvas>
        </div>
    </div>

</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get the data from the server
        const goyaArr = <%- JSON.stringify(goyaDominance) %>;
        const finalDominance = <%- JSON.stringify(dominance) %>;

        // Function to generate greyscale colors from near-white to near-black
        function generateGreyscaleColors(count) {
            const colors = [];
            const min = 25; // Darkest grey (near-black)
            const max = 230; // Lightest grey (near-white)
            const step = (max - min) / (count - 1);

            for (let i = 0; i < count; i++) {
                const value = min + (i * step);
                const color = `rgba(${value}, ${value}, ${value}, 0.8)`;
                colors.push(color);
            }
            return colors;
        }


        // Create the line chart for goyaArr
        const ctxLine = document.getElementById('lineChart').getContext('2d');
        const lineChart = new Chart(ctxLine, {
            type: 'line',
            data: {
                labels: goyaArr.map((_, index) => `Hour ${index + 1}`),
                datasets: [{
                    label: 'Goya Dominance',
                    data: goyaArr,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    fill: false,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Hours'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Dominance'
                        }
                    }
                }
            }
        });

        // Sort the finalDominance data
        const sortedData = Object.entries(finalDominance).sort((a, b) => b[1] - a[1]);
        const sortedLabels = sortedData.map(item => item[0].toUpperCase()); // Capitalize labels
        const sortedValues = sortedData.map(item => item[1]);

        // Generate greyscale colors for your data points
        const greyscaleColors = generateGreyscaleColors(sortedValues.length);
        // Create the doughnut chart for finalDominance
        const ctxDoughnut = document.getElementById('doughnutChart').getContext('2d');
        const doughnutChart = new Chart(ctxDoughnut, {
            type: 'doughnut',
            data: {
                labels: sortedLabels,
                datasets: [{
                    data: sortedValues,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)',
                        'rgba(255, 99, 71, 0.2)',
                        'rgba(144, 238, 144, 0.2)',
                        'rgba(32, 178, 170, 0.2)',
                        'rgba(173, 216, 230, 0.2)'
                    ],
                    borderColor: 'rgba(0,0,0,1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                layout: {
                    padding: 16
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                const label = context.label || '';
                                const value = context.raw !== undefined ? context.raw.toFixed(2) + '%' : '';
                                return `${label}: ${value}`;
                            }
                        }
                    },
                    legend: {
                        display: true,
                        position: 'right',
                        labels: {
                            font : {
                              size: 20
                            },
                            generateLabels: function (chart) {
                                const data = chart.data;
                                if (data.labels.length && data.datasets.length) {
                                    return data.labels.map((label, i) => {
                                        const meta = chart.getDatasetMeta(0);
                                        const value = data.datasets[0].data[i].toFixed(2) + '%';
                                        return {
                                            text: `${label}: ${value}`,
                                            fillStyle: data.datasets[0].backgroundColor[i],
                                            strokeStyle: 'black',
                                            hidden: meta.data[i].hidden,
                                            index: i
                                        };
                                    });
                                }
                                return [];
                            }
                        }
                    }
                },
                elements: {
                    arc: {
                        borderWidth: 1,
                        borderColor: 'rgba(0, 0, 0, 1)',
                        spacing: 8 // Add spacing between segments
                    }
                }
            },
        });

    });

</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Play and Pause functionality for the audio
        const playButton = document.getElementById('playAudio');
        const pauseButton = document.getElementById('pauseAudio');
        const audioElement = document.getElementById('analysisAudio');

        playButton.addEventListener('click', () => {
            audioElement.play();
        });

        pauseButton.addEventListener('click', () => {
            audioElement.pause();
        });
    });
</script>
</body>
</html>
